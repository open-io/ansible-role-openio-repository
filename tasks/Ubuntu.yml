---
- name: Check if the repository is available
  uri:
    url: "{{ openio_repository_mirror_url_base }}/{{ repo.key }}/{{ repo.value.release }}/{{ ansible_lsb.id | default(ansible_distribution)}}/{{ ansible_distribution_release }}"
  with_dict: "{{ openio_repository_products }}"
  when:
    - repo.value.state is not defined or repo.value.state != 'absent'
    - openio_repository_check_reachability
  loop_control:
    loop_var: repo
  no_log: '{{ openio_repository_no_log }}'
  tags: install

- name: Install python-apt
  package:
    name: python-apt
    state: present
  check_mode: false
  tags: install

- name: "Setup repository key"
  apt_key:
    id: "{{ openio_repository_keyid }}"
    url: "{{ openio_repository_mirror_url_base_nocreds }}/{{ openio_repository_gpgkey }}"
    state: present
  tags: install

- name: "Configure repositories for {{ ansible_lsb.id }} {{ ansible_distribution_release }}"
  apt_repository:
    repo: "deb {{ openio_repository_mirror_url_base }}/{{ repo.key }}/{{ repo.value.release }}/{{ ansible_lsb.id | default(ansible_distribution) }}/ {{ ansible_distribution_release }}/"
    state: "{{ repo.value.state | default(openio_repository_product_state_default) }}"
    filename: "openio-{{ repo.key }}-{{ repo.value.release | replace('/', '-') }}"
  with_dict: "{{ openio_repository_products }}"
  loop_control:
    loop_var: repo
  no_log: '{{ openio_repository_no_log }}'
  tags: install

- name: "Install required packages to run add-apt-repository"
  package:
    name: "software-properties-common"
    state: present
  tags: install

- name: "Configure `universe` repositories for {{ ansible_lsb.id }} {{ ansible_distribution_release }}, required for python-software-properties"
  command: 'add-apt-repository universe'
  register: res
  changed_when: "' distribution component enabled for all sources.' in res.stdout"
  tags: install

- name: "Update APT cache"
  apt:
    update_cache: true
  changed_when: false
  tags: install

- name: "Install required packages to configure repositories"
  package:
    name: "{{ pkg }}"
    state: present
  when: ansible_distribution_release == 'xenial'
  with_items:
    - python-software-properties
    - python3-software-properties
  loop_control:
    loop_var: pkg
  tags: install

- name: "Install required packages to configure repositories"
  package:
    name: "{{ pkg }}"
    state: present
  when: ansible_distribution_release == 'bionic'
  with_items:
    - software-properties-common
  loop_control:
    loop_var: pkg
  tags: install

- name: "Configure OpenStack {{ openio_repository_openstack_release }} release repository"
  apt_repository:
    repo: "deb http://ubuntu-cloud.archive.canonical.com/ubuntu {{ ansible_lsb.codename }}-updates/{{ openio_repository_openstack_release }} main"
    state: present
    filename: "cloudarchive-{{ openio_repository_openstack_release }}"
  when:
    - openio_repository_manage_openstack_repository
    - ansible_distribution_release == 'xenial'
  tags: install

- name: "Setup repository key for OpenStack repository"
  apt_key:
    id: 5EDB1B62EC4926EA
    keyserver: keyserver.ubuntu.com
  when:
    - openio_repository_manage_openstack_repository
    - ansible_distribution_release == 'xenial'
  tags: install

- name: "Update APT cache"
  apt:
    update_cache: true
  changed_when: false
  tags: install

- name: Configure policy to disable starting services at package install
  copy:
    src: policy-rc.d
    dest: /usr/sbin/policy-rc.d
    owner: root
    group: root
    mode: 0755
  when:
    - openio_repository_disable_policy_autostart
  tags: install
...
